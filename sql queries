use hostel_db;
CREATE TABLE roles (
    id INT PRIMARY KEY AUTO_INCREMENT,
    role_name VARCHAR(50) UNIQUE NOT NULL
);

-- Insert roles
INSERT INTO roles (role_name) VALUES 
('student'), 
('warden'), 
('caretaker'), 
('messmanager'), 
('hostelmanager');


CREATE TABLE users (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100),
    email VARCHAR(100) UNIQUE,
    password VARCHAR(255),
    role_id INT,
    FOREIGN KEY (role_id) REFERENCES roles(id)
);

CREATE TABLE warden (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    warden_id VARCHAR(20) UNIQUE,
    contact VARCHAR(15),
    department VARCHAR(50), 
    hostel VARCHAR(20),
    floor VARCHAR(10)
);
CREATE TABLE students (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    student_id VARCHAR(20) UNIQUE,
    contact INT NOT NULL,
    department VARCHAR(50),
    year VARCHAR(20),
    grouptype INT,
    hostel VARCHAR(50),
    room VARCHAR(15),
    warden_id VARCHAR(20),
    FOREIGN KEY (warden_id) REFERENCES warden(warden_id)
);

CREATE TABLE hostelstaff (
    id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT UNIQUE,
    name VARCHAR(100),
    email VARCHAR(100),
    contact VARCHAR(15)
);


CREATE TABLE leave_requests (
    id INT PRIMARY KEY AUTO_INCREMENT,
    student_id VARCHAR(20),
    warden_id VARCHAR(20),
    from_date DATE,
    to_date DATE,
    reason TEXT,
    status ENUM('pending', 'approved', 'rejected') DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (student_id) REFERENCES students(student_id),
    FOREIGN KEY (warden_id) REFERENCES students(warden_id)
);

CREATE TABLE student_leaves (
    id INT AUTO_INCREMENT PRIMARY KEY,
    student_id VARCHAR(20),
    warden_id VARCHAR(20),
    leave_type ENUM('Leave', 'OD', 'Internal OD','Internal Training') NOT NULL,
    from_date DATE,
    to_date DATE,
    from_time TIME,
    to_time TIME,
    reason TEXT,
    warden_approval ENUM('pending', 'approved', 'rejected') DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (student_id) REFERENCES students(student_id),
    FOREIGN KEY (warden_id) REFERENCES students(warden_id)
);

CREATE TABLE warden_leave_requests (
    id INT PRIMARY KEY AUTO_INCREMENT,
    warden_id VARCHAR(20),
    leave_type VARCHAR(20),
    from_date DATE,
    to_date DATE,
    reason TEXT,
    alternate_warden VARCHAR(20),
   alternate_wardenId VARCHAR(20),
   contact VARCHAR(15),
    status ENUM('pending', 'approved', 'rejected') DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (warden_id) REFERENCES warden(warden_id)
    FOREIGN KEY (alternate_wardenId) REFERENCES warden(warden_id)
);

CREATE TABLE complaints (
    id INT PRIMARY KEY AUTO_INCREMENT,
    student_id INT,   
    complaint_type VARCHAR(50),
    filepath VARCHAR(255), 
    issue TEXT,
    status ENUM('pending','assigned','resolved') DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (student_id) REFERENCES students(id)
);

CREATE TABLE computerlab_slots (
    id INT PRIMARY KEY AUTO_INCREMENT,
    venue VARCHAR(50),
    from_time TIME,
    to_time TIME,
    slot_date DATE,
    total_systems INT
);

CREATE TABLE computer_bookings (
    id INT PRIMARY KEY AUTO_INCREMENT,
    student_id VARCHAR(50),
    slot_id INT,
    system_no INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (student_id) REFERENCES students(student_id),
    FOREIGN KEY (slot_id) REFERENCES computerlab_slots(id),
    UNIQUE (slot_id, system_no) 
);


CREATE TABLE room_change_requests (
    id INT PRIMARY KEY AUTO_INCREMENT,
    student_id VARCHAR(20),
    hostel VARCHAR(10),
    floor VARCHAR(10),
    room_no INT,
    cot VARCHAR(10),
    reason TEXT,
    status ENUM('pending', 'approved', 'rejected') DEFAULT 'pending',
    FOREIGN KEY (student_id) REFERENCES students(student_id)
);

CREATE TABLE meal_requests (
    id INT PRIMARY KEY AUTO_INCREMENT,
    student_id VARCHAR(20),
    date DATE,
    meal_type ENUM('breakfast', 'lunch', 'dinner'),
    status ENUM('requested', 'cancelled', 'served') DEFAULT 'requested',
    FOREIGN KEY (student_id) REFERENCES students(student_id)
);

-- -- database.sql
-- -- Create database
-- CREATE DATABASE IF NOT EXISTS student_management;
-- USE student_management;

-- -- Create hostels table
-- CREATE TABLE hostels (
--     id INT PRIMARY KEY AUTO_INCREMENT,
--     name VARCHAR(100) NOT NULL,
--     capacity INT NOT NULL,
--     warden_id INT,
--     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--     updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
-- );
-- create table users (
--     id INT PRIMARY KEY AUTO_INCREMENT,
--     name VARCHAR(100) NOT NULL,
--     email VARCHAR(100) NOT NULL UNIQUE,
--     password VARCHAR(100) NOT NULL,
--     role enum ('student', 'warden','caretaker','hostemanager', 'messmanager') NOT NULL,
-- )
-- -- Create wardens table
-- CREATE TABLE wardens (
--     id INT PRIMARY KEY AUTO_INCREMENT,
--     name VARCHAR(100) NOT NULL,
--     phone VARCHAR(15) NOT NULL,
--     email VARCHAR(100),
--     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--     updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
-- );

-- -- Create students table
-- CREATE TABLE students (
--     id INT PRIMARY KEY AUTO_INCREMENT,
--     name VARCHAR(100) NOT NULL,
--     student_id VARCHAR(50) UNIQUE NOT NULL,
--     course VARCHAR(100) NOT NULL,
--     hostel_id INT,
--     room VARCHAR(20) NOT NULL,
--     phone VARCHAR(15),
--     email VARCHAR(100),
--     profile_image VARCHAR(255),
--     group_number INT DEFAULT 1,
--     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--     updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
--     FOREIGN KEY (hostel_id) REFERENCES hostels(id) ON DELETE SET NULL
-- );

-- -- Create biometric_data table
-- CREATE TABLE biometric_data (
--     id INT PRIMARY KEY AUTO_INCREMENT,
--     student_id INT NOT NULL,
--     timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--     attendance_percentage DECIMAL(5,2) DEFAULT 0.00,
--     night_attendance BOOLEAN DEFAULT FALSE,
--     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--     FOREIGN KEY (student_id) REFERENCES students(id) ON DELETE CASCADE
-- );

-- -- Create complaints table
-- CREATE TABLE complaints (
--     id INT PRIMARY KEY AUTO_INCREMENT,
--     student_id INT NOT NULL,
--     category ENUM('maintenance', 'food', 'security', 'academic', 'other') NOT NULL,
--     title VARCHAR(200) NOT NULL,
--     description TEXT NOT NULL,
--     priority ENUM('low', 'medium', 'high', 'urgent') DEFAULT 'medium',
--     status ENUM('pending', 'in_progress', 'resolved', 'rejected') DEFAULT 'pending',
--     admin_response TEXT,
--     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--     updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
--     FOREIGN KEY (student_id) REFERENCES students(id) ON DELETE CASCADE
-- );

-- -- Create leave_applications table
-- CREATE TABLE leave_applications (
--     id INT PRIMARY KEY AUTO_INCREMENT,
--     student_id INT NOT NULL,
--     leave_type ENUM('medical', 'emergency', 'personal', 'academic', 'other') NOT NULL,
--     start_date DATE NOT NULL,
--     end_date DATE NOT NULL,
--     reason TEXT NOT NULL,
--     emergency_contact VARCHAR(15),
--     status ENUM('pending', 'approved', 'rejected') DEFAULT 'pending',
--     admin_remarks TEXT,
--     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--     updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
--     FOREIGN KEY (student_id) REFERENCES students(id) ON DELETE CASCADE
-- );

-- -- Add foreign key constraint for hostels-wardens relationship
-- ALTER TABLE hostels ADD CONSTRAINT fk_hostel_warden 
-- FOREIGN KEY (warden_id) REFERENCES wardens(id) ON DELETE SET NULL;

-- -- Insert sample data
-- -- Insert wardens
-- INSERT INTO wardens (name, phone, email) VALUES
-- ('Dr. Smith', '+1234567890', 'smith@university.edu'),
-- ('Prof. Johnson', '+1234567891', 'johnson@university.edu'),
-- ('Dr. Williams', '+1234567892', 'williams@university.edu');

-- -- Insert hostels
-- INSERT INTO hostels (name, capacity, warden_id) VALUES
-- ('Ganga', 200, 1),
-- ('Yamuna', 180, 2),
-- ('Saraswati', 150, 3);

-- -- Insert sample students
-- INSERT INTO students (name, student_id, course, hostel_id, room, phone, email, profile_image, group_number) VALUES
-- ('John Doe', '737623DCTI001', 'B Tech - GT | 2nd year', 1, '203(C)', '+1234567893', 'john.doe@student.edu', 'https://via.placeholder.com/80x80', 1),
-- ('Jane Smith', '737623DCTI002', 'B Tech - CSE | 2nd year', 1, '204(A)', '+1234567894', 'jane.smith@student.edu', 'https://via.placeholder.com/80x80', 2),
-- ('Mike Johnson', '737623DCTI003', 'B Tech - ECE | 3rd year', 2, '301(B)', '+1234567895', 'mike.johnson@student.edu', 'https://via.placeholder.com/80x80', 1);

-- -- Insert sample biometric data
-- INSERT INTO biometric_data (student_id, attendance_percentage, night_attendance) VALUES
-- (1, 80.00, TRUE),
-- (1, 85.50, TRUE),
-- (2, 92.30, FALSE),
-- (3, 78.90, TRUE);

-- -- Insert sample complaints
-- INSERT INTO complaints (student_id, category, title, description, priority) VALUES
-- (1, 'maintenance', 'AC not working', 'The air conditioner in room 203(C) has not been working for the past 3 days', 'high'),
-- (2, 'food', 'Poor food quality', 'The food served in the mess today was not fresh', 'medium');

-- -- Insert sample leave applications
-- INSERT INTO leave_applications (student_id, leave_type, start_date, end_date, reason, emergency_contact) VALUES
-- (1, 'medical', '2025-01-10', '2025-01-12', 'Medical checkup at home', '+1234567896'),
-- (3, 'personal', '2025-01-15', '2025-01-20', 'Family function', '+1234567897');

-- -- Create indexes for better performance
-- CREATE INDEX idx_student_id ON students(student_id);
-- CREATE INDEX idx_student_hostel ON students(hostel_id);
-- CREATE INDEX idx_biometric_student ON biometric_data(student_id);
-- CREATE INDEX idx_biometric_timestamp ON biometric_data(timestamp);
-- CREATE INDEX idx_complaints_student ON complaints(student_id);
-- CREATE INDEX idx_complaints_status ON complaints(status);
-- CREATE INDEX idx_leaves_student ON leave_applications(student_id);
-- CREATE INDEX idx_leaves_status ON leave_applications(status);
-- CREATE INDEX idx_leaves_dates ON leave_applications(start_date, end_date);